2023-11-26 20:20:38.535289-05:00 database: wrong user or password; user: "SA"
org.h2.message.DbException: Wrong user name or password [28000-224]
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.Engine.openSession(Engine.java:154)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.util.JdbcUtils.getConnection(JdbcUtils.java:288)
	at org.h2.server.web.WebServer.getConnection(WebServer.java:811)
	at org.h2.server.web.WebApp.login(WebApp.java:1039)
	at org.h2.server.web.WebApp.process(WebApp.java:227)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:177)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Wrong user name or password [28000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:522)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 50 more
2023-11-26 20:56:59.899369-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLFeatureNotSupportedException: Feature not supported: "CHARACTER VARYING(255)"; SQL statement:
create table payment (amount bigint, payment_date varchar(255), payment_method varchar(255), paymentid varchar(255) generated by default as identity, primary key (paymentid)) [50100-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:568)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.getUnsupportedException(DbException.java:287)
	at org.h2.command.ddl.SequenceOptions.getBounds(SequenceOptions.java:316)
	at org.h2.command.ddl.SequenceOptions.getBounds(SequenceOptions.java:244)
	at org.h2.schema.Sequence.<init>(Sequence.java:100)
	at org.h2.table.Column.initializeSequence(Column.java:459)
	at org.h2.command.ddl.CommandWithColumns.generateSequences(CommandWithColumns.java:103)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:113)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:256)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:262)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233)
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createTables(SchemaCreatorImpl.java:420)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createSequencesTablesConstraints(SchemaCreatorImpl.java:340)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createFromMetadata(SchemaCreatorImpl.java:239)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.performCreation(SchemaCreatorImpl.java:172)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:142)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:118)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:256)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1173)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:936)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-26 21:43:29.864788-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-26 21:43:29.884814-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-26 21:43:30.259293-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "SHIPPINGTYPE" not found; SQL statement:
INSERT INTO shippingType (shippingType, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address') [42102-224]
2023-11-26 21:44:18.596024-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-26 21:44:18.605106-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-26 21:45:25.507162-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-26 21:45:25.543239-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-26 21:54:59.674034-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-26 21:54:59.683341-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-26 22:06:26.216633-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-26 22:06:26.227144-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-26 22:10:28.019551-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-26 22:10:28.029562-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-26 22:10:52.998685-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-26 22:10:53.008757-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 14:54:57.163323-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 14:54:57.174494-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 14:54:57.506029-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "SHIPPINGTYPE" not found; SQL statement:
INSERT INTO shippingType (shippingType, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address') [42102-224]
2023-11-27 14:56:21.486650-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 14:56:21.498697-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 14:56:21.837773-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "SHIPPINGTYPE" not found; SQL statement:
INSERT INTO shippingType (shippingType, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address') [42102-224]
2023-11-27 14:56:39.480276-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 14:56:39.490275-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 14:56:39.776924-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "SHIPPINGTYPE" not found; SQL statement:
INSERT INTO shippingType (shippingType, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address') [42102-224]
2023-11-27 14:58:06.892453-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 14:58:06.901452-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 14:58:07.188462-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]Data for Administrators INSERT INTO Customer (firstName, lastName, email, phoneNumber, username, password, isAdmin, addressLine, state, country, zipCode) VALUES ('Diego', 'Frausto Ramirez', 'dfraust4@students.kennesaw.edu', '333-333-3333', 'dram2023', 'fraustox91*', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Jeff', 'Adkisson', 'jadkisson@kennesaw.edu', '444-444-4444', 'jeffadkisson1', 'professorJeff123', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Matthew', 'Elledge', 'melledge@students.kennesaw.edu', '555-555-5555', 'w00tam', 'mell87msb', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('David', 'Lowe', 'dlowe23@students.kennesaw.edu', '777-777-7777', 'dLowe2023', 'Wol73x3d', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Eunsu', 'You', 'eyou1@students.kennesaw.edu', '888-888-8888', 'eYou2023', 'Ouy25x7F', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127')"; expected "DELETE, DROP"; SQL statement:
Data for Administrators INSERT INTO Customer (firstName, lastName, email, phoneNumber, username, password, isAdmin, addressLine, state, country, zipCode) VALUES ('Diego', 'Frausto Ramirez', 'dfraust4@students.kennesaw.edu', '333-333-3333', 'dram2023', 'fraustox91*', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Jeff', 'Adkisson', 'jadkisson@kennesaw.edu', '444-444-4444', 'jeffadkisson1', 'professorJeff123', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Matthew', 'Elledge', 'melledge@students.kennesaw.edu', '555-555-5555', 'w00tam', 'mell87msb', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('David', 'Lowe', 'dlowe23@students.kennesaw.edu', '777-777-7777', 'dLowe2023', 'Wol73x3d', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Eunsu', 'You', 'eyou1@students.kennesaw.edu', '888-888-8888', 'eYou2023', 'Ouy25x7F', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127') [42001-224]
2023-11-27 14:58:26.870340-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 14:58:26.881338-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 14:58:27.164164-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "FIRSTNAME" not found; SQL statement:
INSERT INTO Customer (firstName, lastName, email, phoneNumber, username, password, isAdmin, addressLine, state, country, zipCode) VALUES ('Diego', 'Frausto Ramirez', 'dfraust4@students.kennesaw.edu', '333-333-3333', 'dram2023', 'fraustox91*', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Jeff', 'Adkisson', 'jadkisson@kennesaw.edu', '444-444-4444', 'jeffadkisson1', 'professorJeff123', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Matthew', 'Elledge', 'melledge@students.kennesaw.edu', '555-555-5555', 'w00tam', 'mell87msb', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('David', 'Lowe', 'dlowe23@students.kennesaw.edu', '777-777-7777', 'dLowe2023', 'Wol73x3d', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Eunsu', 'You', 'eyou1@students.kennesaw.edu', '888-888-8888', 'eYou2023', 'Ouy25x7F', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-27 15:00:24.605537-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:00:24.614538-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:00:24.885863-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "SHIPPINGTYPE" not found; SQL statement:
INSERT INTO shippingType (shippingType, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address') [42102-224]
2023-11-27 15:01:06.434159-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:01:06.443160-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:01:56.015235-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:01:56.024223-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:02:48.106313-05:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "FIRSTNAME" not found; SQL statement:
INSERT INTO Customer (firstName, lastName, email, phoneNumber, username, password, isAdmin, addressLine, state, country, zipCode) VALUES ('Diego', 'Frausto Ramirez', 'dfraust4@students.kennesaw.edu', '333-333-3333', 'dram2023', 'fraustox91*', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1345)
	at org.h2.server.web.WebApp.query(WebApp.java:1143)
	at org.h2.server.web.WebApp.query(WebApp.java:1119)
	at org.h2.server.web.WebApp.process(WebApp.java:245)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:177)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2023-11-27 15:03:50.798046-05:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ISADMIN" not found; SQL statement:
INSERT INTO Customer (FIRST_Name, LAST_Name, email, PHONE_Number, username, password, isAdmin, addressLine, state, country, zip_Code) VALUES ('Diego', 'Frausto Ramirez', 'dfraust4@students.kennesaw.edu', '333-333-3333', 'dram2023', 'fraustox91*', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1345)
	at org.h2.server.web.WebApp.query(WebApp.java:1143)
	at org.h2.server.web.WebApp.query(WebApp.java:1119)
	at org.h2.server.web.WebApp.process(WebApp.java:245)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:177)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2023-11-27 15:03:59.714408-05:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ADDRESSLINE" not found; SQL statement:
INSERT INTO Customer (FIRST_Name, LAST_Name, email, PHONE_Number, username, password, is_Admin, addressLine, state, country, zip_Code) VALUES ('Diego', 'Frausto Ramirez', 'dfraust4@students.kennesaw.edu', '333-333-3333', 'dram2023', 'fraustox91*', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1345)
	at org.h2.server.web.WebApp.query(WebApp.java:1143)
	at org.h2.server.web.WebApp.query(WebApp.java:1119)
	at org.h2.server.web.WebApp.process(WebApp.java:245)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:177)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2023-11-27 15:05:06.517151-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:05:06.525487-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:05:06.848522-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ADDRESS_CUSTOMER" not found; SQL statement:
INSERT INTO Customer (FIRST_Name, LAST_Name, email, PHONE_Number, username, password, is_Admin, address_CUSTOMER Line, state, country, zip_Code) VALUES ('Diego', 'Frausto Ramirez', 'dfraust4@students.kennesaw.edu', '333-333-3333', 'dram2023', 'fraustox91*', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-27 15:05:25.392344-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:05:25.402345-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:05:25.673897-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "([*]'Jeff', 'Adkisson', 'jadkisson@kennesaw.edu', '444-444-4444', 'jeffadkisson1', 'professorJeff123', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Matthew', 'Elledge', 'melledge@students.kennesaw.edu', '555-555-5555', 'w00tam', 'mell87msb', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('David', 'Lowe', 'dlowe23@students.kennesaw.edu', '777-777-7777', 'dLowe2023', 'Wol73x3d', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Eunsu', 'You', 'eyou1@students.kennesaw.edu', '888-888-8888', 'eYou2023', 'Ouy25x7F', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127')"; expected "(, SELECT, TABLE, VALUES"; SQL statement:
('Jeff', 'Adkisson', 'jadkisson@kennesaw.edu', '444-444-4444', 'jeffadkisson1', 'professorJeff123', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Matthew', 'Elledge', 'melledge@students.kennesaw.edu', '555-555-5555', 'w00tam', 'mell87msb', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('David', 'Lowe', 'dlowe23@students.kennesaw.edu', '777-777-7777', 'dLowe2023', 'Wol73x3d', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127'), ('Eunsu', 'You', 'eyou1@students.kennesaw.edu', '888-888-8888', 'eYou2023', 'Ouy25x7F', 1, '1100 South Marietta Pkwy SE', 'Georgia', 'United States', '30127') [42001-224]
2023-11-27 15:05:46.492881-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:05:46.501878-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:06:28.546949-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:06:28.565949-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:06:28.865792-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]Data for ShippingType INSERT INTO shippingType (shipping_Type, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address')"; expected "DELETE, DROP"; SQL statement:
Data for ShippingType INSERT INTO shippingType (shipping_Type, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address') [42001-224]
2023-11-27 15:07:09.406634-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:07:09.417632-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:07:09.690688-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "SHIPPINGTYPE" not found; SQL statement:
INSERT INTO shippingType (shipping_Type, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address') [42102-224]
2023-11-27 15:08:00.188781-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:08:00.197783-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:08:45.142090-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:08:45.151087-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:20:37.796997-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:20:37.808997-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:34:16.640740-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:34:16.650746-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:36:16.255845-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:36:16.268010-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:38:12.028628-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:38:12.038146-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:38:53.989624-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:38:54.000624-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:40:24.098153-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:40:24.111672-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:41:16.627869-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:41:16.638379-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:43:18.812735-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:43:18.821734-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:47:56.332991-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:47:56.341992-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:48:47.947935-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:48:47.957934-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:49:15.895770-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:49:15.904769-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:49:37.435133-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:49:37.444133-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:50:39.526428-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:50:39.536429-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:57:08.660155-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:57:08.670989-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 15:57:28.435099-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-27 15:58:13.738546-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 15:58:13.747544-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:00:12.066806-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 16:00:12.075807-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:02:31.605805-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 16:02:31.616832-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:03:00.075689-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-27 16:06:36.277242-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 16:06:36.286753-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:07:12.840608-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-27 16:14:20.729036-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 16:14:20.739550-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:14:58.959225-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-27 16:17:40.924969-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 16:17:40.935005-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:18:57.740021-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 16:18:57.751820-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:21:08.562920-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 16:21:08.590455-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:22:25.762403-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 16:22:25.773927-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 16:22:57.535479-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-27 17:36:33.670303-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:36:33.681369-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:36:33.683368-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:36:33.684368-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer [42001-224]
2023-11-27 17:36:33.684368-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:36:33.685369-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:36:33.685369-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:39:01.192566-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:39:01.204758-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:39:01.207759-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:39:01.208759-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer [42001-224]
2023-11-27 17:39:01.209758-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:39:01.210759-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:39:01.210759-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:40:54.621748-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:40:54.635259-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:40:54.638631-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:40:54.639631-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer [42001-224]
2023-11-27 17:40:54.640632-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:40:54.641631-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:40:54.641631-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:40:55.043765-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO [*]Order (customer_ID, product_ID, shipping_Type_ID) VALUES (1,1,1)"; expected "identifier"; SQL statement:
INSERT INTO Order (customer_ID, product_ID, shipping_Type_ID) VALUES (1,1,1) [42001-224]
2023-11-27 17:41:22.035015-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:41:22.047035-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:41:22.050035-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:41:22.050035-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer [42001-224]
2023-11-27 17:41:22.051036-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:41:22.052035-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:41:22.052035-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:41:22.420593-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ORDERS" not found; SQL statement:
INSERT INTO Orders (customer_ID, product_ID, shipping_Type_ID) VALUES (1,1,1) [42102-224]
2023-11-27 17:42:10.275415-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:42:10.288193-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:42:10.290192-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:42:10.291194-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer [42001-224]
2023-11-27 17:42:10.292193-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:42:10.293193-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:42:10.293193-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:43:43.105979-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:43:43.117554-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customer_id bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:43:43.121062-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:43:43.121062-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKb8tboo4d95mh8gavvovwbb7vg foreign key (customer_id) references customer [42001-224]
2023-11-27 17:43:43.122063-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:43:43.123062-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:43:43.124062-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:44:32.843252-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:44:32.854761-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:44:32.857763-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:44:32.858762-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer [42001-224]
2023-11-27 17:44:32.860324-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:44:32.861269-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:44:32.862274-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:45:09.656605-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:45:09.669119-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:45:09.671118-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:45:09.672236-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer [42001-224]
2023-11-27 17:45:09.672236-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:45:09.673237-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:45:09.673237-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:45:55.177551-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:45:55.190057-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:45:55.193568-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:45:55.194568-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer [42001-224]
2023-11-27 17:45:55.194568-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:45:55.195568-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:45:55.196567-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:46:48.895957-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:46:48.908476-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:46:48.911477-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:46:48.912477-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer [42001-224]
2023-11-27 17:46:48.913982-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:46:48.913982-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:46:48.914986-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:48:33.644141-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:48:33.658712-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (customerid bigint, orderid bigint generated by default as identity, productid bigint unique, shipping_typeid bigint, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:48:33.661713-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:48:33.661713-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKa0dm6hyv8i8phl3eryn7s4ahb foreign key (customerid) references customer [42001-224]
2023-11-27 17:48:33.662714-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKqno0pgsps3dvj5jiip1aq227k foreign key (productid) references product [42001-224]
2023-11-27 17:48:33.663713-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists [*]order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types"; expected "identifier"; SQL statement:
alter table if exists order add constraint FKps8doqx3waqkll25r054xgmna foreign key (shipping_typeid) references shipping_types [42001-224]
2023-11-27 17:48:33.664712-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:50:08.320354-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:50:08.332860-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:50:08.335860-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:50:08.336860-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:52:04.346851-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:52:04.363058-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:52:04.368058-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:52:04.369057-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:53:30.666389-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:53:30.683411-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:53:30.686412-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:53:30.688412-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:57:54.814747-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:57:54.826256-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 17:57:54.829767-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists customer add constraint FK7u2whob2ux3uvnny7fskfxlge foreign key (order_orderid) references order [42001-224]
2023-11-27 17:57:54.829767-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references [*]order"; expected "identifier"; SQL statement:
alter table if exists product add constraint FKjra2fln4dfox2hg3cjol7is76 foreign key (orders_orderid) references order [42001-224]
2023-11-27 17:58:38.961489-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 17:58:38.972999-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:01:38.721758-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:01:38.758041-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:01:39.108129-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP TABLE IF EXISTS [*]ORDER"; expected "identifier"; SQL statement:
DROP TABLE IF EXISTS ORDER [42001-224]
2023-11-27 18:02:09.277787-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:02:09.289294-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:03:28.902975-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:03:28.915479-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:04:51.136197-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:04:51.148497-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:05:02.531205-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:05:02.543713-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:05:02.874217-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO ORDERS (orderDate, customerID, productID, shippingTypeID) VALUES (1, '10/23/2023', 1, 1, 1) [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-27 18:05:28.522098-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:05:28.534391-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:07:43.995177-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:07:44.005690-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:08:23.172349-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:08:23.185368-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:09:12.807019-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:09:12.820529-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:09:32.821524-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "drop table if exists [*]order cascade "; expected "identifier"; SQL statement:
drop table if exists order cascade  [42001-224]
2023-11-27 18:09:32.832031-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table [*]order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid))"; expected "identifier"; SQL statement:
create table order (orderid bigint generated by default as identity, order_date varchar(255), primary key (orderid)) [42001-224]
2023-11-27 18:11:38.407686-05:00 database: wrong user or password; user: "SA"
org.h2.message.DbException: Wrong user name or password [28000-224]
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.Engine.openSession(Engine.java:154)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.getConnectionUrl(H2ConsoleAutoConfiguration.java:94)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:261)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:261)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)
	at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:622)
	at java.base/java.util.stream.ReferencePipeline.toList(ReferencePipeline.java:627)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.logDataSources(H2ConsoleAutoConfiguration.java:86)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.lambda$h2Console$0(H2ConsoleAutoConfiguration.java:69)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.withThreadContextClassLoader(H2ConsoleAutoConfiguration.java:78)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.h2Console(H2ConsoleAutoConfiguration.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:201)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:85)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Wrong user name or password [28000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:522)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 90 more
2023-11-27 18:11:40.219939-05:00 database: wrong user or password; user: "SA"
org.h2.message.DbException: Wrong user name or password [28000-224]
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.Engine.openSession(Engine.java:154)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:316)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:152)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:34)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:119)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:264)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:239)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:216)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:231)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:199)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:169)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1380)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1451)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1173)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:936)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Wrong user name or password [28000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:522)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 53 more
2023-11-27 18:11:42.505603-05:00 database: wrong user or password; user: "SA"
org.h2.message.DbException: Wrong user name or password [28000-224]
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.Engine.openSession(Engine.java:154)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:316)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:46)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.getIsolatedConnection(GenerationTargetToDatabase.java:60)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.jdbcStatement(GenerationTargetToDatabase.java:110)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:77)
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:235)
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:219)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropTables(SchemaDropperImpl.java:362)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropConstraintsTablesSequences(SchemaDropperImpl.java:253)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:215)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:185)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:155)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:115)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:242)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:143)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:140)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:293)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:444)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1455)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1173)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:936)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Wrong user name or password [28000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:522)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 62 more
2023-11-27 23:43:01.054940-05:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]ORDERID ORDERID ORDERID ORDERID ORDERID ORDERID ORDERID ORDERID ORDERID"; SQL statement:
ORDERID ORDERID ORDERID ORDERID ORDERID ORDERID ORDERID ORDERID ORDERID [42000-224]
2023-11-28 12:25:41.314621-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-28 12:32:45.198508-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-28 13:16:59.873049-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ORDERDATE" not found; SQL statement:
INSERT INTO Orders (orderDate, customerID, productID, shippingTypeID) VALUES (11/28/2023)  [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:18:20.964118-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ORDERDATE" not found; SQL statement:
INSERT INTO Orders (orderDate) VALUES (11/28/2023)  [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:19:13.049530-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ORDERDATE" not found; SQL statement:
INSERT INTO Orders (orderDate) VALUES ('11/28/2023')  [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:23:27.966957-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ORDERDATE" not found; SQL statement:
INSERT INTO Orders (orderDate) VALUES ('11/28/2023') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:24:00.825697-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ORDERDATE" not found; SQL statement:
INSERT INTO Orders (orderDate) VALUE ('11/28/2023') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:34:54.501516-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Function "SCOPE_IDENTITY" not found; SQL statement:
SET @product = SCOPE_IDENTITY() SET @Customers = SCOPE_IDENTITY() SET @shipping_Types = SCOPE_IDENTITY() INSERT INTO Orders (orderDate, @product, @Customers, @shipping_Types) VALUES ('11/28/2023') [90022-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.Parser.readFunction(Parser.java:3786)
	at org.h2.command.Parser.readTermWithIdentifier(Parser.java:5148)
	at org.h2.command.Parser.readTerm(Parser.java:4834)
	at org.h2.command.Parser.readFactor(Parser.java:3337)
	at org.h2.command.Parser.readSum(Parser.java:3324)
	at org.h2.command.Parser.readConcat(Parser.java:3289)
	at org.h2.command.Parser.readCondition(Parser.java:3079)
	at org.h2.command.Parser.readExpression(Parser.java:2999)
	at org.h2.command.Parser.parseSet(Parser.java:7548)
	at org.h2.command.Parser.parsePrepared(Parser.java:635)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:36:51.130109-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "BEGIN TRANSACTION [*]SET @product = SCOPE_IDENTITY() SET @Customers = SCOPE_IDENTITY() SET @shipping_Types = SCOPE_IDENTITY() COMMIT TRANSACTION INSERT INTO Orders (orderDate, @product, @Customers, @shipping_Types) VALUES ('11/28/2023')"; SQL statement:
BEGIN TRANSACTION SET @product = SCOPE_IDENTITY() SET @Customers = SCOPE_IDENTITY() SET @shipping_Types = SCOPE_IDENTITY() COMMIT TRANSACTION INSERT INTO Orders (orderDate, @product, @Customers, @shipping_Types) VALUES ('11/28/2023') [42000-224]
2023-11-28 13:40:49.355942-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Function "SCOPE_IDENTITY" not found; SQL statement:
SET @product = SCOPE_IDENTITY() SET @Customers = SCOPE_IDENTITY() SET @shipping_Types = SCOPE_IDENTITY() INSERT INTO Orders (orderDate, @product, @Customers, @shipping_Types) VALUES ('11/28/2023') [90022-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.Parser.readFunction(Parser.java:3786)
	at org.h2.command.Parser.readTermWithIdentifier(Parser.java:5148)
	at org.h2.command.Parser.readTerm(Parser.java:4834)
	at org.h2.command.Parser.readFactor(Parser.java:3337)
	at org.h2.command.Parser.readSum(Parser.java:3324)
	at org.h2.command.Parser.readConcat(Parser.java:3289)
	at org.h2.command.Parser.readCondition(Parser.java:3079)
	at org.h2.command.Parser.readExpression(Parser.java:2999)
	at org.h2.command.Parser.parseSet(Parser.java:7548)
	at org.h2.command.Parser.parsePrepared(Parser.java:635)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:48:10.144465-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Function "SCOPE_IDENTITY" not found; SQL statement:
SET @product = SCOPE_IDENTITY() INSERT INTO shipping_Types (shipping_Type, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address') [90022-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.Parser.readFunction(Parser.java:3786)
	at org.h2.command.Parser.readTermWithIdentifier(Parser.java:5148)
	at org.h2.command.Parser.readTerm(Parser.java:4834)
	at org.h2.command.Parser.readFactor(Parser.java:3337)
	at org.h2.command.Parser.readSum(Parser.java:3324)
	at org.h2.command.Parser.readConcat(Parser.java:3289)
	at org.h2.command.Parser.readCondition(Parser.java:3079)
	at org.h2.command.Parser.readExpression(Parser.java:2999)
	at org.h2.command.Parser.parseSet(Parser.java:7548)
	at org.h2.command.Parser.parsePrepared(Parser.java:635)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:50:22.799985-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Function "SCOPE_IDENTITY" not found; SQL statement:
SET @product = SCOPE_IDENTITY() INSERT INTO shipping_Types (shipping_Type, price, description) VALUES ('Overnight', 29, 'Product will arrive within the next 24 hours to your address'), ('3-Day', 19, 'Product will arrive within the next 3-Business Days to your address'), ('Ground', 0, 'Product will arrive within the next 14-Business Days to your address') [90022-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.Parser.readFunction(Parser.java:3786)
	at org.h2.command.Parser.readTermWithIdentifier(Parser.java:5148)
	at org.h2.command.Parser.readTerm(Parser.java:4834)
	at org.h2.command.Parser.readFactor(Parser.java:3337)
	at org.h2.command.Parser.readSum(Parser.java:3324)
	at org.h2.command.Parser.readConcat(Parser.java:3289)
	at org.h2.command.Parser.readCondition(Parser.java:3079)
	at org.h2.command.Parser.readExpression(Parser.java:2999)
	at org.h2.command.Parser.parseSet(Parser.java:7548)
	at org.h2.command.Parser.parsePrepared(Parser.java:635)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:52:10.515269-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ORDERDATE" not found; SQL statement:
INSERT INTO Orders (orderDate, productID, customerID, shippingTypeID) VALUES ('11/28/2023') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 13:54:40.377725-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ORDERDATE" not found; SQL statement:
INSERT INTO Orders (orderDate, productID, customerID, shippingTypeID) VALUES ('11/28/2023', 1, 1, 1) [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-28 14:15:18.971167-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ORDERDATE" not found; SQL statement:
INSERT INTO Orders (orderDate, productID, customerID, shipping_TypeID) VALUES ('11/28/2023', 1, 1, 1) [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-29 23:34:59.343337-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-29 23:43:29.139968-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-29 23:51:36.260097-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-29 23:53:42.612828-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:04:20.071812-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:12:25.558310-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "IMAGEURL" not found; SQL statement:
INSERT INTO product (name, description, price, available, imageURL) VALUES ('SpaceX Starship', 'Designed by Elon Musk!', 900000000, 1, 'SpaceX-Starship.jpg'), ('LauncherOne', 'The safest rocket ship known to man!', 450000000, 1, 'LauncherOne.jpg'), ('Vulcan Centaur', 'Made from rare materials!', 700000000, 1, 'Vulcan-Centaur.jpg'), ('MX-774', 'Vintage rocket ship designed to be cost efficient!', 1000000000, 1, 'MX-774.jpg'), ('PGM-11 Redstone', 'The most operator-friendly rocket ship!', 200000000, 1, 'PGM-11-Redstone.jpg'), ('New Shepherd', 'Our most unique lightweight design!', 300000000, 1, 'Titan-IIID.jpg') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-30 00:13:09.025868-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "IMAGE_URL" not found; SQL statement:
INSERT INTO product (name, description, price, available, image_URL) VALUES ('SpaceX Starship', 'Designed by Elon Musk!', 900000000, 1, 'SpaceX-Starship.jpg'), ('LauncherOne', 'The safest rocket ship known to man!', 450000000, 1, 'LauncherOne.jpg'), ('Vulcan Centaur', 'Made from rare materials!', 700000000, 1, 'Vulcan-Centaur.jpg'), ('MX-774', 'Vintage rocket ship designed to be cost efficient!', 1000000000, 1, 'MX-774.jpg'), ('PGM-11 Redstone', 'The most operator-friendly rocket ship!', 200000000, 1, 'PGM-11-Redstone.jpg'), ('New Shepherd', 'Our most unique lightweight design!', 300000000, 1, 'Titan-IIID.jpg') [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.command.Parser.parseColumn(Parser.java:1190)
	at org.h2.command.Parser.parseColumnList(Parser.java:1175)
	at org.h2.command.Parser.parseInsert(Parser.java:1549)
	at org.h2.command.Parser.parsePrepared(Parser.java:719)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:564)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.TestThymeLeaf.demo4.Demo4Application.main(Demo4Application.java:10)
2023-11-30 00:24:06.976039-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:26:16.685019-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:31:04.421356-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:33:00.850011-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:35:20.252019-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:37:05.999056-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:40:25.299909-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:41:14.131368-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:41:53.059365-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:42:52.309428-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
2023-11-30 00:43:53.085085-05:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-224]
